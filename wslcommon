# -*- mode: sh; coding: utf-8-unix -*-

if [ ! -v DRVFS ]; then
    source wslinit
fi
eval "$DRVFS"

function winpath() {
    (
        if [[ "$1" =~ ^/ ]]; then
            shopt -u nocasematch
            wslpath=$1
            for ((i = ${#drvfs[@]} - 1; i >= 0; i--)); do
                IFS='|' read -r key value <<< "${drvfs[$i]}"
                if [[ "$key" == '/' ]]; then
                    key=''
                fi
                if [[ "$wslpath" =~ ^"$key"($|/) ]]; then
                    value=$(echo "$value" | sed 's/\\/&&/g')
                    # sed に -r を付けると変数の値も正規表現として認識するので注意すること
                    winpath=$(echo "$wslpath" | sed "s!^$key!$value!")
                    if [[ "$winpath" =~ :$ ]]; then
                        winpath+=/
                    fi
                    winpath=$(echo "$winpath" | sed 's!/!\\!g')
                    echo "$winpath"
                    return 0
                fi
            done
            return 1
        else
            winpath=$(echo "$1" | sed 's!/!\\!g')
            echo "$winpath"
            return 0
        fi
    )
}

function wslpath() {
    (
        if [[ "$1" =~ ^'\'|^.: ]]; then
            shopt -s nocasematch
            winpath=$1
            for ((i = 0; i < ${#drvfs[@]}; i++)); do
                IFS='|' read -r key value <<< "${drvfs[$i]}"
                if [[ "$winpath" =~ ^"$value"($|\\) ]]; then
                    value=$(echo "$value" | sed 's/\\/&&/g')
                    # sed に -r を付けると変数の値も正規表現として認識するので注意すること
                    wslpath=$(echo "$winpath" | sed "s!^$value!$key!i")
                    wslpath=$(echo "$wslpath" | sed 's!\\!/!g')
                    wslpath=$(echo "$wslpath" | sed 's!^//!/!g')
                    echo "$wslpath"
                    return 0
                fi
            done
            return 1
        else
            wslpath=$(echo "$1" | sed 's!\\!/!g')
            echo "$wslpath"
            return 0
        fi
    )
}

function drvfs_p() {
    local wslpath win_path
    wsl_path=$(readlink -m -- "$1")
    win_path=$(winpath "$wsl_path")
    if [ $? -eq 0 ] && [[ ! "$win_path" =~ ^'\\wsl$\' ]]; then
        return 0
    else
        return 1
    fi
}

function escape() {
    target=$1

    # ターゲットに半角スペースを含まず、全角スペースを含んでいる場合、半角スペースを
    # 追加する
    if [[ ! "$target" =~ ' ' && "$target" =~ '　' ]]; then
        target+=' '
    fi

    # ターゲットに半角スペースを含んでいるときと含んでいないときとで、エスケープ
    # する文字を変更する
    if [[ "$target" =~ ' ' ]]; then
        echo "$target" | sed 's/[|<>"]/^&/g'
    else
        echo "$target" | sed 's/[&|<>^"%]/^&/g'
    fi
}

function cmd0() {
    cmd.exe /c "$@" | sed 's/\r$//'
    return ${PIPESTATUS[0]}
}

documents_win_path=$(cd /mnt/c; cmd0 echo %USERPROFILE%)'\Documents'
documents_wsl_path=$(wslpath "$documents_win_path")

function cmd1() {
    (
        cd "$documents_wsl_path"
        cmd0 "$@"
    )
}

function cmd() {
    # 引数を escape する
    local args=()
    for arg; do
        args+=("$(escape "$arg")")
    done
    set -- "${args[@]}"

    cmd1 "$@"
}

function start() {
    # 本コマンドから起動したアプリにフォーカスが移らないことがある場合の対策を実施
    # （コンソールから本コマンドを起動した場合には「対策前の設定」でも問題ないが、
    #   X サーバ上に起動した emacs から本コマンドを起動すると現象が発生することが
    #   あるため）
    # cmd start "" "$@" # ← 対策前の設定

    # cmd内から呼んでいる cmd.exe のために引数を一回 escape する
    local args=()
    for arg; do
        args+=("$(escape "$arg")")
    done
    set -- "${args[@]}"

    cmd start /b cmd.exe /c start "" "$@"
}
