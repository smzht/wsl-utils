# -*- mode: sh; coding: utf-8-unix -*-

function winpath() {
    /bin/wslpath -w "$@" 2> /dev/null
}

function wslpath() {
    /bin/wslpath -u "$@" 2> /dev/null
}

function drvfs_p() {
    local win_path
    win_path=$(winpath -a "$1")
    if [ $? -eq 0 ] && [[ ! "$win_path" =~ ^'\\wsl$\' ]]; then
        return 0
    else
        return 1
    fi
}

function escape() {
    target=$1

    # ターゲットに半角スペースを含まず、全角スペースを含んでいる場合、半角スペースを
    # 追加する
    if [[ ! "$target" =~ ' ' && "$target" =~ '　' ]]; then
        target+=' '
    fi

    # ターゲットに半角スペースを含んでいるときと含んでいないときとで、エスケープ
    # する文字を変更する
    if [[ "$target" =~ ' ' ]]; then
        echo "$target" | sed 's/[|<>"]/^&/g'
    else
        echo "$target" | sed 's/[&|<>^"%]/^&/g'
    fi
}

function cmd0() {
    cmd.exe /c "$@" | sed 's/\r$//'
    return ${PIPESTATUS[0]}
}

documents_win_path=$(cd /mnt/c; cmd0 echo %USERPROFILE%)'\Documents'
documents_wsl_path=$(wslpath "$documents_win_path")

function cmd1() {
    (
        cd "$documents_wsl_path"
        cmd0 "$@"
    )
}

function cmd() {
    # 引数を escape する
    local args=()
    for arg; do
        args+=("$(escape "$arg")")
    done
    set -- "${args[@]}"

    cmd1 "$@"
}

function start() {
    # 本コマンドから起動したアプリにフォーカスが移らないことがある場合の対策を実施
    # （コンソールから本コマンドを起動した場合には「対策前の設定」でも問題ないが、
    #   X サーバ上に起動した emacs から本コマンドを起動すると現象が発生することが
    #   あるため）
    # cmd start "" "$@" # ← 対策前の設定

    # cmd内から呼んでいる cmd.exe のために引数を一回 escape する
    local args=()
    for arg; do
        args+=("$(escape "$arg")")
    done
    set -- "${args[@]}"

    cmd start /b cmd.exe /c start "" "$@"
}
