#+STARTUP: showall indent

* WSL Utilities

Windows Subsystem for Linux で動作するユティリティコマンド群です。

Windows 10 1903 以降で利用可能です。それより前の Windows で利用する場合は、
該当するバージョンのサブディレクトリ配下のファイルを本ディレクトリにマージしてご利用ください。

DrvFs を多くマウントしている場合は、.bash_profile を以下のように設定して、wslinit を実行して
ご利用ください。wsl コマンドの高速化 が図られます。

#+BEGIN_EXAMPLE
[ -r ~/.bashrc ] && source ~/.bashrc
source wslinit
#+END_EXAMPLE

wslcommon は、コマンドと同じ場所（コマンドパスが通ったディレクトリ）に格納してご利用ください。
UNC パスへのアクセスが必要な場合には、以下のような /etc/fstab を設定し、マウントしてご利用
ください。

#+BEGIN_EXAMPLE
\\<ホスト名称>\<共有名>	/mnt/share1	drvfs	defaults,noatime,uid=1000,gid=1000	0 0
#+END_EXAMPLE

Windows 10 1803 以降では、/etc/fstab があれば自動マウントするデフォルト設定となっています。

- http://ascii.jp/elem/000/001/634/1634120/
- http://www.atmarkit.co.jp/ait/articles/1807/12/news036.html

/etc/fstab の設定で、IPアドレスを含む UNC パスに対してのマウントポイントを指定する場合、
「\\172」で始まる箇所などが８進数認識されてしまいます。この場合、２つ目の「\」を敢えて
８進数の「\134」と記載することで対策可能です。

#+BEGIN_EXAMPLE
\\134172.16.0.1\<共有名>	/mnt/share1	drvfs	<オプション>	0 0
#+END_EXAMPLE

同一のネットワークボリュームに複数の UNC パスを指定したい場合には、以下のようにマウント
ポイントを同一のものにすることが可能です。

#+BEGIN_EXAMPLE
\\<IPアドレス>\<共有名>		/mnt/share1	drvfs	<オプション>	0 0
\\<ホスト名称>.<domain>\<共有名>	/mnt/share1	drvfs	<オプション>	0 0
\\<ホスト名称>\<共有名>		/mnt/share1	drvfs	<オプション>	0 0
#+END_EXAMPLE

認証を必要とするネットワークボリュームを利用する場合は、予め以下の設定により認証情報を
記憶させる必要があります。

- https://www.ipentec.com/document/windows-delete-stored-authentication-information

ネットワークボリュームにアクセスした際に開く認証画面で、「資格情報を記憶する」にチェック
を入れることでも登録できます。

注）Windows 10 1903 辺りからだと思いますが、/etc/fstab に上記の設定を追加すると \\\\wsl$\
から始まるパスにアクセスできなかったり、VolFs 上で exe コマンドが実行できなくなる問題が
発生します。この問題は、/etc/fstab の LABEL 行の後に次のとおり C:\ のマウント定義を
明示することで解決できることが分かりました。バグだと思いますが、Windows 10 1909 でも
直っていないようですので、回避策としてお試しください。
#+BEGIN_EXAMPLE
LABEL=cloudimg-rootfs	/	 ext4	defaults	0 0
C:\	/mnt/c	drvfs	defaults,noatime,uid=1000,gid=1000	0 0
#+END_EXAMPLE
/etc/fstab を変更した際は、コマンドプロンプトから次のコマンドを入力後、WSLコンソール
を再起動してください。
#+BEGIN_EXAMPLE
> wslconfig /t <ディストリビューション名>
#+END_EXAMPLE

** ■ wslstart

cygstart 的コマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
wslstart target
wslstart -h
#+END_EXAMPLE

詳しくは以下を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/62.html][WSL で cygstart 的コマンドを使うための設定]]

また、スクリプトの初めにあるコメントも参照ください。

** ■ sglstart

singleton な動きをする cygstart 的コマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
sglstart target
sglstart -h
#+END_EXAMPLE

詳しくは以下を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/63.html][singleton な動きをする cygstart 的コマンドを使うための設定 （WSL版）]]

** ■ wslln

NTFS シンボリックリンクの作成に対応した ln 的コマンドです。

Windows 10 1709 の Windows Subsystem for Linux では、DrvFS ファイルシステム上
にある NTFS シンボリックリンクを表示できるようになりました。ただし、ln コマンドで
NTFS シンボリックリンクを作成することはできません。
本コマンドは、DrvFs ファイルシステム上にシンボリックリンクを作成する場合は NTFS シンボリックリンク
を、DrvFs ファイルシステム以外にシンボリックリンクを作成する場合は WSL 本来のシンボリックリンク
を作成するように動作する ln と mklink の機能をラッパーしたコマンドです。

Windows 10 1709 以降の Build 17046 では、DrvFs 上での NTFS シンボリックリンクの作成がサポートされ
ましたが、リンクターゲットが相対パスである必要があるなど、幾つかの制約が有るようです。

- https://msdn.microsoft.com/en-us/commandline/wsl/release-notes#build-17046
- https://kledgeb.blogspot.jp/2017/11/wsl-120-build-17046wsl.html

*** 使用方法

#+BEGIN_EXAMPLE
wslln [-s] [-f] [-a] target link
wslln [-s] [-f] [-a] target
wslln -h
#+END_EXAMPLE

*** コマンドオプション

**** ● -s オプション

ハードリンクではなく、シンボリックリンクを作成します。
wslln -s target link 実行時のシンボリックリンク作成ルールは、以下のとおりとなります。

|---------------------------+---------------------+---------------------------------|
| target が示すのパスの位置 | link を作成する場所 | 動作                            |
|---------------------------+---------------------+---------------------------------|
| DrvFs 配下                | DrvFs 配下          | NTFS のシンボリックリンクを作成 |
| VolFs 配下                | DrvFs 配下          | 許可しない（エラーとする）      |
| DrvFs 配下                | VolFs 配下          | WSL のシンボリックリンクを作成  |
| VolFs 配下                | VolFs 配下          | WSL のシンボリックリンクを作成  |
|---------------------------+---------------------+---------------------------------|

**** ● -f オプション

リンクファイルが存在する場合、削除してからリンクファイルを作成します。

**** ● -a オプション

ターゲットファイルのパスを絶対パスに変換（readlink -m）してからリンクを作成します。
ln コマンドには無いオプションとなります。以下で紹介している Emacs との連携の設定の
中で利用されています。

*** 必要な環境設定

NTFS シンボリックリンクを管理者権限なしで作成できるようにするために、以下のどちらかの
対応を実施する必要があります。

**** ● 開発モードにする

- https://www.ipentec.com/document/document.aspx?page=windows-windows-10-set-developer-mode

**** ● SeCreateSymbolicLinkPrivilege 権限を付加する（再ログインが必要）

- https://qiita.com/ucho/items/c5ea0beb8acf2f1e4772#comment-250af72ab706bd611549

※ administrators のメンバーは UAC により特権が削除されるという以下のような情報も
あるのですが、私の環境では発生していません。

- https://qiita.com/azechi/items/f9a97393cb41be4be437

*** Emacs との連携

以下の説明を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/73.html][WSL で NTFS シンボリックリンクや Windows ショートカットを作成するための設定]]

** ■ wslsc

Windows ショートカットを作成するためのコマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
wslsc [-f] target shortcut
wslsc [-f] target
wslsc -h
#+END_EXAMPLE

Windows 10 1903 より前のバージョンの Windows でのショートカットの作成ルールは、以下の
とおりとなります。
Windows 10 1903 以降では、VolFs にも \\\\wsl$\ で始まるパスで Windows からアクセス可能と
なりましたので、target ファイルが VolFs 上にあってもショートカットを作成することができます。

|---------------------------+-------------------------+----------------------------|
| target が示すのパスの位置 | shortcut を作成する場所 | 動作                       |
|---------------------------+-------------------------+----------------------------|
| DrvFs 配下                | DrvFs 配下              | ショートカットを作成       |
| DrvFs 配下                | VolFs 配下              | ショートカットを作成       |
| VolFs 配下                | DrvFs 配下              | 許可しない（エラーとする） |
| VolFs 配下                | VolFs 配下              | 許可しない（エラーとする） |
|---------------------------+-------------------------+----------------------------|

*** コマンドオプション

**** ● -f オプション

ショートカットファイルが存在する場合、削除してからショートカットファイルを作成します。

*** Emacs との連携

以下の説明を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/73.html][WSL で NTFS シンボリックリンクや Windows ショートカットを作成するための設定]]

** ■ cyg

WSL から Cygwin のコマンドを実行するためのコマンドです。

Cygwin 環境で作成したシェルスクリプト等を WSL のシェルから実行できるようにするために
作成しました。

コマンドスクリプトの初めに Cygwin の bash.exe の在り処を指定する変数がありますので、
利用者の環境に合わせて修正し、ご利用ください。

*** 使用方法

#+BEGIN_EXAMPLE
cyg command [args]
cyg -h
#+END_EXAMPLE

*** 使用例

#+BEGIN_EXAMPLE
cyg uname -a
cyg cygstart notepad
cyg cygstart .
cyg shell-script
cyg sh shell-script
cyg eval 'echo $PATH'
#+END_EXAMPLE

wslstart コマンドを作成しているので不要と思いますが、以下のような alias を
定義することで利用しやすくなると思います。

#+BEGIN_EXAMPLE
alias open="cyg cygstart"
#+END_EXAMPLE

また、以下のようにシェルスクリプトのシバンを指定して、間接的に cyg を実行する
方法もあります。

#+BEGIN_EXAMPLE
#!/home/<username>/bin/cyg sh

uname -a
#+END_EXAMPLE

*** 注意事項

**** ● ホームディレクトリに .bash_profile の作成が必要な場合があります

cyg では Cygwin の bash.exe コマンドを -l オプション付きで実行しています。
このため、Cygwin のホームディレクトリに .bash_profile が存在しないと
.bashrc が実行されずに環境変数（PATH 等）の設定が行われません。この場合は、
Cygwin のホームディレクトリに以下の内容の .bash_profile ファイルを作成する
ことで対策してください。

#+BEGIN_EXAMPLE
[ -r ~/.bashrc ] && source .bashrc
#+END_EXAMPLE

**** ● cyg では、tty を必要とするコマンドは動作しません

cyg では、tty を必要とするコマンドは動作しません。gnupack-13 系で提供される
.bashrc には stty の設定が含まれており、これが cyg 実行時にエラーを出力します。
stty 文を以下のとおりに if 文で囲むことでエラーを回避できますので、必要であれば
対策をしてください。

#+BEGIN_EXAMPLE
if [ -t 1 ]; then
    stty -ixon
fi
#+END_EXAMPLE

**** ● gnupack の startup_config.ini で行っている環境変数の設定は有効になりません

gnupack では startup_config.ini で環境変数の設定が可能となっています。しかし、
cyg ではその設定が有効になりません。startup_config.ini で PATH などの環境設定
を設定している場合は、.bashrc に設定を移すなどの対策が必要となります。

**** ● Cygwin のコマンドは、WSL の LANG 環境変数の値で実行します

cyg では、Cygwin のコマンドを WSL の LANG 環境変数の値で実行します。これは、
コマンド出力の文字化けを回避するために行っているものです。もし、Cygwin を
cp932 で使っている場合には、スクリプトの文字コードを変更するなど調整が必要
となる可能性があります。

**** ● cyg コマンド実行時にエラーメッセージが表示される場合があります

cyg コマンド実行時に以下のエラーメッセージが表示される場合があります。

#+BEGIN_EXAMPLE
bash.exe: warning: could not find /tmp, please create!
#+END_EXAMPLE

このエラーメッセージが表示される場合は、以下のコマンドを実行してください。
次回の cyg コマンド利用時からエラーメッセージが表示されなくなります。

#+BEGIN_EXAMPLE
cyg mkdir /tmp
#+END_EXAMPLE

**** ● Windows 10 1809 以降では、Emacs の shell-mode で cyg コマンドを実行できません

以下の win コマンドで説明している問題が cyg コマンドでも発生します
（内部で exe コマンドを実行しているため）。このため、cyg コマンドを実行する
場合は、win コマンドを使って実行するか、cyg コマンドの最後の方にある "$cygsh_path"
で始まる行に win コマンドを先行指定することで対策してください。
今後、この問題は Windows 10 のバージョンアップ時に解決されるものと思われますので、
cyg コマンドの修正による対策は行いません。

** ■ win

WSL で exe コマンドを実行するためのコマンドです。

Windows 10 1809 以降では、Emacs の shell-mode で exe コマンドを実行できません。
「exec > /dev/tty」というコマンドを入力することで回避はできるのですが、以降で紹介
する winsudo が動かないことが分かりましたので、本コマンドを作成しました。

*** 使用方法

#+BEGIN_EXAMPLE
win command
#+END_EXAMPLE

*** 使用例

#+BEGIN_EXAMPLE
win cmd.exe
win ipconfig.exe
#+END_EXAMPLE

** ■ winsudo

WSL で動作する Windows のための sudo 的コマンドです。

WSL で Windows のコマンドを管理者権限で実行するために作成しました。chocolatey
コマンドのように、実行時に管理者権限を必要とするコマンドを WSL の shell 上から実行
できるようになります。

*** 使用方法

#+BEGIN_EXAMPLE
winsudo command
#+END_EXAMPLE

*** 使用例

#+BEGIN_EXAMPLE
winsudo choco.exe search chocolateygui
winsudo choco.exe install chocolateygui
winsudo cmd.exe
#+END_EXAMPLE

上記の使用例の前者のコマンドをよく利用する場合は、以下の alias を .bashrc 等に
設定しておくのが良いと思います。

#+BEGIN_EXAMPLE
alias choco='winsudo choco.exe'
#+END_EXAMPLE

また、winsudo cmd.exe を実行した後であれば、exe コマンドを管理者権限のまま何度も
実行することができます。

*** 注意事項

**** ● 「exec > /dev/tty」を実行している場合は解除してください 

Windows 10 1809 以降では、Emacs の shell-mode で exe コマンドを実行できません。
この問題を回避するために「exec > /dev/tty」というコマンドを入力する方法がある
のですが、このコマンドを入力していると本コマンドは正常に動作しないことが分かり
ました。このため、もしこの回避コマンドを実行している場合には設定を解除し、先に
紹介している win コマンドを利用するようしてください。
